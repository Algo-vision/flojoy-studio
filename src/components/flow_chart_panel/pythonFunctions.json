{"GENERATOR": {"LINSPACE.py": "import numpy as np\nimport traceback\nfrom .VCTR import fetch_inputs\n\ndef LINSPACE(**kwargs):\n    try:\n        if 'ctrls' not in kwargs:\n            ctrls = dict(start=-10, end=10, steps=1000)\n        elif 'start' not in kwargs['ctrls'].keys():\n            ctrls = dict(start=-10, end=10, steps=1000)\n        else:\n            ctrls = kwargs['ctrls']\n        x = np.linspace(ctrls['start'], ctrls['end'], ctrls['steps'])\n    except Exception:\n        print(traceback.format_exc())\n    return {'x0': x}", "SINE.py": "import numpy as np\nfrom .VCTR import fetch_inputs\n\ndef SINE(**kwargs):\n    previous_job_results = fetch_inputs(kwargs['previous_job_ids'])\n\n    params = {\n        'frequency': 1,\n        'offset': 0,\n        'amplitude': 1,\n    }\n\n    if 'ctrls' in kwargs:\n        ctrls = kwargs['ctrls']\n        for key, input in ctrls.items():\n            paramName = input['param']\n            if paramName in params:\n                params[paramName] = input['value']\n\n    xy0 = previous_job_results[0]\n\n    x = xy0['x0']\n    y = params['amplitude'] * np.sin(x * params['frequency']) + params['offset']\n\n    return {'x0':x, 'y0':y}\n", "RAND.py": "import numpy as np\nfrom .VCTR import fetch_inputs\n\ndef RAND(**kwargs):\n    previous_job_results = fetch_inputs(kwargs['previous_job_ids'])\n\n    xy0 = previous_job_results[0]\n\n    x = xy0['x0']\n\n    y = np.random.normal(size=len(x))\n    \n    return {'x0':x, 'y0':y}\n", "CONSTANT.py": "import numpy as np\nfrom .VCTR import fetch_inputs\n\ndef CONSTANT(**kwargs):\n    ''' Generates a single x-y vector of numeric (floating point) constants'''\n\n    previous_job_results = fetch_inputs(kwargs['previous_job_ids'])\n\n    ctrls = kwargs['ctrls'] if 'ctrls' in kwargs else dict(constant=3)\n\n    xy0 = previous_job_results[0]\n\n    x = xy0['x0']\n    y = np.full(len(x), float(ctrls['constant']))\n\n    return {'x0':x, 'y0':y}"}, "TRANSFORMER": {"ADD.py": "import numpy as np\nfrom .VCTR import fetch_inputs\n\ndef ADD(**kwargs):\n    ''' Add 2 input vectors and return the result '''\n\n    previous_job_results = fetch_inputs(kwargs['previous_job_ids'])\n\n    x = previous_job_results[0]['x0']\n\n    y = np.add(\n        previous_job_results[0]['y0'], \n        previous_job_results[1]['y0'])\n    \n    return {'x0':x, 'y0':y}", "MULTIPLY.py": "import numpy as np\nfrom .VCTR import fetch_inputs\n\ndef MULTIPLY(**kwargs):\n    ''' Takes 2 input vectors, multiplies them, and returns the result '''\n\n    previous_job_results = fetch_inputs(kwargs['previous_job_ids'])\n\n    x = previous_job_results[0]['x0']\n\n    y = np.multiply(\n        previous_job_results[0]['y0'], \n        previous_job_results[1]['y0'])\n\n    return {'x0':x, 'y0':y}"}, "VISOR": {"HISTOGRAM.py": "from .VCTR import fetch_inputs\nfrom .template import init_template\n\ndef HISTOGRAM(**kwargs):\n    previous_job_results = fetch_inputs(kwargs['previous_job_ids'])\n    payload = previous_job_results[0]\n\n    fig = dict(\n        data = [dict(\n            x = list(payload['x0']),\n            type='histogram',\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "SCATTER.py": "from .VCTR import fetch_inputs\nfrom .template import init_template\n\ndef SCATTER(**kwargs):\n    previous_job_results = fetch_inputs(kwargs['previous_job_ids'])\n    payload = previous_job_results[0]\n\n    fig = dict(\n        data = [dict(\n            x = list(payload['x0']),\n            y = list(payload['y0']),\n            type='scatter',\n            mode='markers'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "template.py": "import plotly.graph_objects as go\n\ndef init_template():\n    \n    template = go.layout.Template()\n\n    # pythonic autotyping of numeric strings\n    template.layout.autotypenumbers = \"strict\"\n\n    # minimiz margins\n    # template.layout.margin = dict(t=0, l=10, b=10, r=0)\n\n    return template\n\n"}}